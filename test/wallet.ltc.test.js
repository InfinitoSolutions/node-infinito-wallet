const Assert = require('assert');
const chai = require('chai');
const { Wallet, CoinType, InfinitoApi } = require('../index');
const ConfigTest = require('./config.test');
chai.should();

let apiConfigMainnet = {
  apiKey: ConfigTest.API_KEY_MAINNET,
  secret: ConfigTest.SECRECT_MAINNET,
  baseUrl: ConfigTest.BASE_URL_MAINNET,
  logLevel: ConfigTest.LOG_LEVEL
};

let apiConfigTestnet = {
  apiKey: ConfigTest.API_KEY_TESTNET,
  secret: ConfigTest.SECRECT_TESTNET,
  baseUrl: ConfigTest.BASE_URL_TESTNET,
  logLevel: ConfigTest.LOG_LEVEL
};

function getApi(isTestnet = true) {
  if (isTestnet) {
    return new InfinitoApi(apiConfigTestnet);
  }
  return new InfinitoApi(apiConfigMainnet);
}

describe('wallet.ltc', async() => {
  describe('#constructor()', async() => {
    it('No Parameter', async() => {
      try {
        new Wallet();
        Assert.fail();
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.invalid_cointype');
      }
    });
    it('Default cointype', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        mnemonic: 'still okay stairs fruit pizza mushroom eye cradle seven speak sudden motion'
      });

      Assert.equal('LTC', wallet.account.coinType);
      Assert.equal('03fb7d4eb42356fbde434f88716dea70fb3b421e951753f643c94e4328a0e371cc', wallet.account.publicKey);
      Assert.equal('LWm7SMDNFdHueM89xVeYU2UgbCTsvs7wf8', wallet.account.address);
    });
  });

  describe('#getAddress()', async() => {
    it('Mnemonic.Mainnet', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        mnemonic: 'toss true onion like penalty spot cloth need disease start coyote suggest'
      });

      Assert.equal(wallet.getAddress(), 'LaPdpM4ZoBzo4YEzthCbWcoZFfmodr4wZu', 'Address must be right');
    });

    it('Mnemonic.Testnet', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        mnemonic: 'toss true onion like penalty spot cloth need disease start coyote suggest',
        isTestNet: true
      });

      Assert.equal(wallet.getAddress(), 'mxU6F5aBJTHy7eKhc5ML9uvvYa1kM5sKEJ', 'Address must be right');
    });

    it('PrivateKey.Mainnet', async() => {
      const keymaps = [ //generated by https://iancoleman.io/bip39/
        //Mnemonic: ski trick deputy wrist cloud tissue army essence maze usage pipe market
        ["m/44'/2'/0'/0/0",'LVwe2h5sZ5FgpmMZ546qXXmGWN9DUpaYHv','026b5e8cdcd9822911af3c91e0c7f76de6b9a8bff602ae81cd93c7ebbce4047909','T6Lc6brH9Ki2gfDnZcrNXJPkYpXGtqPSS9pjrFDGPXb3qLbvXhcU'],
        ["m/44'/2'/0'/0/1",'LKVYksopLhtCAK2HpBhm11tehqFTRcgM7H','02f413ca1804157ed0e1687fd61a0ee15301bee57c651b73093418315368585b01','T8WvUvEsBtwwqWtGGC4D7KzuC7Q7EvJ6K6KSGDV7C3CuP5FyDbGN'],
        ["m/44'/2'/0'/0/2",'LX4ZVwPAKkHxiBp5sQAB1oAR7nzL5SnAcp','03bff0dddc35cd29fe88ea05d5e23125cd0d182791ac01cc8427a42f665f4c5d71','T5tanSYDi1v54uj92vbBdwBv5nhSFiGs5ewz65osbtUkXcU8u6rw'],
        ["m/44'/2'/0'/0/3",'LhKTpmnvpALmyHJDyAtEDYKQHnUVdg7xgC','03fe165cff592a1440df738faec8b0b885c29175f5bc3e6ccb557a446782558ffb','T8sJWUP3w7FVpZGy365DyyRos7qwxZXWgsxTP2LLQYSWQCgdZHVB'],
        ["m/44'/2'/0'/0/4",'LKphR3mjtqLpYL4a7ZXDfcfRmDuTSBbBJD','0357124ecdd040f8319f8955ad81007d4025185ae7e250349507ce78478418e82d','TAy5PppzFtKnugmCFwyjnQAGMZy7Lk4tPiDsWw49f1x6VpeVYa7C'],
        ["m/44'/2'/0'/0/5",'Lh6LStEqB63T53rr61PD3Xz3EoSrsJwxVM','02d8b7f19313b4feea8118c5304d74f1c743a1ec5dec77d9b7a5314897047bb406','T5FHAMYVKePPLRLKiSgyjSAwPJzaarHGRjgee39jSWd2vCXaQKfF'],
        ["m/44'/2'/0'/0/6",'LR8ficrq4QTXAHKULk8L4q9Bpuqqaiwxm7','03ffa712f863eb4e9f9a83e02c7b4524c719c0822ac48b4d5787f3b010d5027745','T6qv7AEbeADTABgAaZFiCNYEC84zWkqGmoEAdLBsqumtg9W2TfnP'],
        ["m/44'/2'/0'/0/7",'LXZupkTy4fnhpWbUSPQEkeWWzkwMu1qZ4R','039cc71eb60be623bee97ad5ea264fc8843dfe33ddb496927b7865867ff56bd953','T9mtKXfsiV55NxRsyaHqMG18h24Z5TkSYrG6LtNT5Ww6JAiXSS7w'],
        ["m/44'/2'/0'/0/8",'LiRWBFH71njzXSJZeMkz69QETKtLUS1hKY','021abbccb946a0fc83649ea76e8e964feaf675ac5f8538918d52680e05610804a9','T8cfPSWtCo2XC3MLU7rSLfgptMJaJKcFPvSh6rfxd1aDJuc7AEaV'],
        ["m/44'/2'/0'/0/9",'LKSmUGHxZpT4J3744oHWLTFrFHi64YqQwd','030ecffb98fb0f2ccc1e30af0571d8a16f74a9755b90cbfee7836d6d013ae24ad6','T7yBFN2HaF4N8mVaonaFPscoD45fDHzm6sLQssbQd3KupADdDZtQ'],
        ["m/44'/2'/0'/0/10",'Lg6LUd88a7gZ7nMuJjbT4h4YpB1To5dKus','0341219c8ebd786630b4266e37d0da53a0925901b10524b5c38a8de468f9e53068','T8ZAzLXKeT8e16SJT27wrSDUMZgcd3mwxKteinoamtitYU8rNwGs'],
        ["m/44'/2'/0'/0/11",'LWU8UmXqD9Cx8phv7aAtU62AKfbabgTYJE','0379fd7e619a916ac5c3b404b486aeddce42b5e9f05a36d414867c5a4aa700e935','T4Cr2QFjKnun5fNyTRu12GaH3wt9rQz7C8h2rx7zSQ35ZhrGrJ21'],
        ["m/44'/2'/0'/0/12",'LgC6CgLXghQ3a6JLBQ1cKREHpnvFYAkgqV','0350be92ce96409bb5f276287cb36e8edff780efc5c8028fd8a224a8cab44ed211','T5JU2FStJVkwBW7NFuRGwQKuhoafUEDQxYeUf5Ue797uzZUrW4sr'],
        ["m/44'/2'/0'/0/13",'LccnKx8RoUyC1k61dhDXKy8gRD33vFWnez','02bdcc94c549d8a9ae63afd5a350a900537ecaa0ba23fa0e57fd6aea209e153416','T7V7SMPsqWWny49ErqTYXmwXypWnNQGRFKR689mAcmQ2Q3zPY9A1'],
        ["m/44'/2'/0'/0/14",'LdDXLuUYGLyuwqEdHiRwAtZjeGg2UBgZta','03aaa3d06cbe48d6bae1fb8ddacd7b97077fa40bde98df6bd077d5a0f4c9fe01f6','T47idFMbC5etdKy2QjV1zhgVTirpRczpBLKBaatvEvE4GKwQzUAd'],
        ["m/44'/2'/0'/0/15",'La31kaXaKh3N8BZU1d3qeHa5dApftV1hnR','02004f03b134470de1ca016b310026379b6492a91d7ee5f6e5648462fa39421fa3','T9a7Ku7BKUAEpgwpCHV8wYJ96nyrtktzthmSCpaixsXj4LDXtsA2'],
        ["m/44'/2'/0'/0/16",'LYSQmLgKUk14j68LWwEyjnUi2umzAq3FBx','0341f37c62874f5eb50532533b532e888f6692d2cbba54769886da77d4e6995cce','T3i9aZV3c9NrtNTecj3Nmc5GUJFbUMn8LLvhJhYXmKWiqT4jz3v3'],
        ["m/44'/2'/0'/0/17",'LYyfsEiyc6ZuLmucrE6cWnU8rt121VeMGo','03fd60ee6bff95ea57ec8e4521d62046791781f8a76862634c5dc749f3c2113091','T5QbhJ63RFb4ju7msjuWwS4YwMd8dhfmJg19sDavxaz68BBVfa8D'],
        ["m/44'/2'/0'/0/18",'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3','02b9cc17fafdb65b2d138844a81cc4c8fef4aeebf33c9494dad201707f0facab74','T8MTxTUmutapHEXJPnZntFt1K8q9pzPLTTkTnPNoCYT5LvwYZocK'],
        ["m/44'/2'/0'/0/19",'LZKcp25YE1fcSHtsjP95CwwFmUv9iVx18A','03a795ff8bc5fee96a5a8a0288d786629861d9430e9be40ad6e43bb2f7ca6b571b','T9yjMKB6P6h2yWNSxVunL4qfz9raEa2yihcyQgjBVPnWEeFthGca']                
      ];

      keymaps.forEach((keymap) => {
        let wallet = new Wallet({
          coinType: CoinType.LTC.symbol,
          privateKey: keymap[3]
        });

        Assert.equal(wallet.getAddress(), keymap[1], `Address must be right. ${JSON.stringify(keymap)}`);
      });
    });

    it('PrivateKey.Testnet', async() => {
      const keymaps = [ //generated by https://iancoleman.io/bip39/
        //Mnemonic: ski trick deputy wrist cloud tissue army essence maze usage pipe market
        ["m/44'/1'/0'/0/0",'mwPpTLSSASxSUBQEi74n2W3CvpJhjFLXge','0343d70cf4b442ccc1658164f000086fcf65502109bcb378e7a25ddccead6a99eb','cRomY3yXnzTEum9jxuD38mfqzc4CY6v11SKQq3H9rdP3k4ZCXqFN'],
        ["m/44'/1'/0'/0/1",'mgokHkNTLm81s5vMqdRkBcoRoP9XReFRa7','0361a50830d7366384baf6dae66584ba929b6f7bd3c5286266b4a61f7fc1df2ca8','cUnfLciKcqBzu4bzWiNGWfPhNvcTjCdbM33BmyaY6i9VKXZ3AorE'],
        ["m/44'/1'/0'/0/2",'mmHgy8VgC48u6kB33PxUTiNw8NxDbWqEeY','03f508ade0d484ab488c39286a4783ebc1997249dbe7cf950edc0abb198c3fe04d','cQFxDcvEhSFizHVFgbWZJLbeYxkjJXoapCeQakQQqd2BsMrnwRRE'],
        ["m/44'/1'/0'/0/3",'mu2EZr5mPA6iywUJgXDNMh9yztvDEwitvD','023a01b6df5600944305509cca384e497890bc0b1b6dd674a42d56c4a4d8bc70bb','cPJEuBocgvVh6ggdsqLj2BAgLKj5sy9AoTgQQfpS1vax1GhFiouw'],
        ["m/44'/1'/0'/0/4",'morjWkeMbaaFy1TaoBTDuxDcmG88EdeJTu','03ba481440fcceaa557d09e96848dc8a9966ceb61cffb921a28fa2e3f99e26039d','cPWQ8f7sAtJV7zJVoAp8nnrtgNP7AqK9wouujmaykMsfUX1BmEoy'],
        ["m/44'/1'/0'/0/5",'mi5oqLr77itcJyejbuzWLqkjFchVzn6j2C','025d3d75f5d8847fc291faaa4f80a47fe5c31ee300767b587d974ec218d2d1b46f','cSRVuD5GnAsikCorXWWTzBGbvZsURECPLKcVNdoeSJgvoyWgbk3p'],
        ["m/44'/1'/0'/0/6",'mkxdt6weKahPDEeroNhyaahnEBAgMdgecW','02df561cb7beffb19e46ebff0e2b986800b6f13ce1f972f7de7059ebc4442946fd','cSq2Z2AKFnTqJUQZ6vyVZdTmRzoptUGUEZoePXb1NDa4mFf7Wid7'],
        ["m/44'/1'/0'/0/7",'mmm3aPLcPtWJuPxAMZ59beVziXPCA4fhvP','0323dc12bc0a99d8888e31f9c1acb160e45137d783feb50d00617d5ad72254f992','cRucvp6vZufwSWxGPtz7Vsj579FVdNfnBQriLZmDTufeAwd5LZSj'],
        ["m/44'/1'/0'/0/8",'mgnGz2hfMJXMDANuMUKop5tJGhNehGH5CV','0264761fd97e92541b74f217969ba4861a0a7aad31fcbd9b538b1749ab1234049d','cPSocjhAEBWxALopFZThhBxUNJZAr4vteXNYi2BiB9znEmQiB67z'],
        ["m/44'/1'/0'/0/9",'mvAcyEPWnHXM4Q7188FDKFazcCtPawPqCZ','025a04f09f1fccbfbe2ae41d0130d61fafa4a82e381077dbc51edf86c5853e88ce','cMypkJzogP31WEcg5t3kbprW2JTKoVvtZjXwTgxYVuy1Hwn5Uvyv'],
        ["m/44'/1'/0'/0/10",'mr1zyP29bSsvSBpTUfaMGsfVBg4tddXE8Y','02819cc13d660f5abafa800c35ba4e3f1e4b5a2caea554c5a8c243b155bdd1e4d5','cR6fMrT1nckyzHT8Z17ep1vS8KMXvnFqeQhjzCLtKCUdUEkCzg1w'],
        ["m/44'/1'/0'/0/11",'modRJ5wRyaoeytoAbDtsL81QT9sF8ACAyF','0367878791f1a8ad3e63be3e8be67e23f43deec21861601d3b1fc31be3b98c8b3a','cPfhBwgkHYuUH5pVZ6YYM1FhhR94TEv1dhKhKYotCnzjkBrq316k'],
        ["m/44'/1'/0'/0/12",'mtSs1JmzrECykqg9xyvYR9Yv77tUtTHFEu','020addc5d0c1ba39a9476cc56f7c7c684b27345c2504bee57806650b2885c4aa2f','cPaNtkWZW8YmXzTaKe3YzyuicLXeEqJPoYhtdrzaVfxQNFTh28bF'],
        ["m/44'/1'/0'/0/13",'muw6AWk6ypJA53XmmrC5en7JodFc5xsvQo','03ec666bea24ff83938ec1da4ebe44982866626426716ce05e2311ea7cf8bfe8cc','cS3EUH8uFQZ2TbEP1Dz1XLJKJJhbm3nJ6JhQwgjNscXumoCsXNrM'],
        ["m/44'/1'/0'/0/14",'mw7gSJcfZQrSZfwCPW2X4jSWJNDMtriQBw','030de437991a5e235a5511840ab4e41f08627b3800b0e1999c8e31a0e7ddd3e6a6','cTQD7zHd45Vq8kgD6rEpHcErsiys3HNECcU3BQpVDKSaDywj5bFM'],
        ["m/44'/1'/0'/0/15",'msiKvbWn7c1mdDxtH3Gh1hhek7iRC2ydtW','02176a200a977d2bafe69234fa2ef7877a04cfb8b9332c79d97b8df8dca9436af0','cVu5YAY6tDgd2FPHFNo9y6ZgViimugNowrrqxpEm1gntio3jijmT'],
        ["m/44'/1'/0'/0/16",'mnNAE5tHrAkw2u8LgsCfczUdborWpMez3q','0202525905230a5da7d3ff6728f69839b73f4aefa09303e1ed5d3b01f6785a0f84','cPZkogWEpdPcn271yw73gLyhdq3DXCcjeCcZVpXDqURvUZRKfFUz'],
        ["m/44'/1'/0'/0/17",'moDmZaGP3AyKy698jDJS6dHEaGFqnXeZhz','03f3132b8f079a770f78401e7e6820dbd12dd369023295250c3779f821d342dd64','cQ84rjG69tLt8LruQUYr6HurxdT9wSuPLCF4sv7gTDG93HHtYwe8'],
        ["m/44'/1'/0'/0/18",'miyvUEHbHAv6ntybuoWTszmeMPoHv3yh8c','0320aa031e600281dad2f22b9a56395d814f9fada0abdc0c468ab8787101f626af','cMg2tUtswZZvSykV6V7T3Japmr4rK42DUv9GyhYZf3oPnroD4oNx'],
        ["m/44'/1'/0'/0/19",'mmi8q9fkkz7omVB2gzWzPmjyj3AzsuaBRN','02770a602050a092752b3ffbb89969b9095a54db6edfef22ab02adfa2023bdce87','cMdQc8p1A6QHFBvTTdWbFjiuNzJkCmy8wgZtJCXdGYUZSq85PMXa']        
      ];

      keymaps.forEach((keymap) => {
        let wallet = new Wallet({
          coinType: CoinType.LTC.symbol,
          privateKey: keymap[3],
          isTestNet: true
        });

        Assert.equal(wallet.getAddress(), keymap[1], `Address must be right. ${JSON.stringify(keymap)}`);
      });
    });
  });

  describe('#getBalance()', async() => {
    it('Mnemonic.Mainnet', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        mnemonic: ConfigTest.MNEMONIC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getBalance();
      Assert.ok(result.balance !== undefined, 'Balance must be exist');
      Assert.ok(result.unconfirmed_balance !== undefined, 'Unconfirmed balance must be exist');
    });

  //   it('PrivateKey.Testnet', async() => {
  //     let wallet = new Wallet({
  //       coinType: CoinType.LTC.symbol,
  //       privateKey: ConfigTest.PRIVATE_KEY_LTC,
  //       isTestNet: true
  //     });

  //     wallet.setApi(getApi(true));
  //     let address = await wallet.getAddress();
  //     console.log("address = ", address);
  //     let result = await wallet.getBalance();
  //     Assert.ok(result.balance > 0, 'Balance must be exist');
  //     Assert.ok(result.unconfirmed_balance !== undefined, 'Unconfirmed balance must be exist');
  //   });
  });

  describe('#getHistory()', async() => {
    it('default', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        mnemonic: ConfigTest.MNEMONIC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getHistory();
      Assert.ok(result.txs.length >= 0, 'History must be exist');
    });

    it('offset.limit', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        mnemonic: ConfigTest.MNEMONIC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getHistory(0, 1);
      console.log("result = ", result);
      Assert.ok(result.txs.length == 1, 'History must have one item');
    });

    it('offset = 50', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        mnemonic: ConfigTest.MNEMONIC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getHistory(50, 50);
      Assert.ok(result.txs.length == 0, 'History must be empty');
    });
  });

  describe('#getDefaultFee()', async() => {
    it('default', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getDefaultFee();
      Assert.ok(result > 0);
    });
    it('high', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getDefaultFee('high');
      Assert.ok(result > 0);
    });
    it('medium', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getDefaultFee('medium');
      Assert.ok(result > 0);
    });
    it('low', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let result = await wallet.getDefaultFee('low');
      Assert.ok(result > 0);
    });
    it('error', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let api = wallet.getApi();
      api.LTC.getFeeRate = function() {
        return { cd: 1 };
      };
      try {
        await wallet.getDefaultFee('low');
        Assert.fail();
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.internal_error');
      }
    });
  });

  describe('#createRawTx()', async() => {
    it('Missing parameter to', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });

      try {
        await wallet.createRawTx({});
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.missing_parameter');
        Assert.equal(err.message, 'Missing required parameter to');
      }
    });

    it('Missing parameter fee', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });

      try {
        await wallet.createRawTx({
          to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3'
        });
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.missing_parameter');
        Assert.equal(err.message, 'Missing required parameter fee or feeType');
      }
    });

    it('Invalid feeType', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });

      try {
        await wallet.createRawTx({
          to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
          feeType: 'InValid'
        });
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.invalid_parameter');
        Assert.equal(err.message, 'Parameter is invalid. (feeType)');
      }
    });

    it('Invalid fee', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });

      try {
        await wallet.createRawTx({
          to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
          fee: 'InValid'
        });
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.invalid_parameter');
        Assert.equal(err.message, 'Parameter is invalid. (fee)');
      }
    });

    it('fee = 0', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });

      try {
        await wallet.createRawTx({
          to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
          fee: 0
        });
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.invalid_parameter');
        Assert.equal(err.message, 'Parameter is invalid. (fee)');
      }
    });

    it('fee < 0', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });

      try {
        await wallet.createRawTx({
          to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
          fee: -1
        });
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.invalid_parameter');
        Assert.equal(err.message, 'Parameter is invalid. (fee)');
      }
    });

    // it('default', async() => {

    //   let wallet = new Wallet({
    //     coinType: CoinType.LTC.symbol,
    //     privateKey: ConfigTest.PRIVATE_KEY_LTC,
    //     isTestNet: true
    //   });
    //   wallet.setApi(getApi(true));
    //   let listUnspent = [{
    //       'tx_id': '1e13afb2b3c1afcd7751298cd72af6d68a90eb1c018990f483f3f1bbf61c09e8',
    //       'vout': 0,
    //       'scriptpubkey': '76a914cb6fdab1832fc8be8eef0a0f11c12e53563e4c4688ac',
    //       'confirmations': 606,
    //       'amount': 9000
    //     }];
    //   let createResult = await wallet.createRawTx({
    //     to: 'yYHM58vCYL6aAxFgnNhbWkQyYEvU8CX3XK',
    //     fee: 5,
    //     amount: 1000,
    //     listUnspent
    //   });

    //   Assert.ok(createResult.fee > 0, 'Fee must be right');
    //   Assert.ok(createResult.tx_id.length > 0, 'Tx id must be right');
    //   Assert.ok(createResult.raw.length > 0, 'Raw must be right');
    // });

    // it('feeType = high', async() => {
    //   let wallet = new Wallet({
    //     coinType: CoinType.LTC.symbol,
    //     privateKey: ConfigTest.PRIVATE_KEY_LTC,
    //     isTestNet: true
    //   });
    //   wallet.setApi(getApi(true));
    //   let listUnspent = [{
    //       'tx_id': '1e13afb2b3c1afcd7751298cd72af6d68a90eb1c018990f483f3f1bbf61c09e8',
    //       'vout': 0,
    //       'scriptpubkey': '76a914cb6fdab1832fc8be8eef0a0f11c12e53563e4c4688ac',
    //       'confirmations': 606,
    //       'amount': 9000
    //     }];
    //   let createResult = await wallet.createRawTx({
    //     to: 'yYHM58vCYL6aAxFgnNhbWkQyYEvU8CX3XK',
    //     feeType: 'high',
    //     amount: 1000,
    //     listUnspent
    //   });

    //   Assert.ok(createResult.fee > 0, 'Fee must be right');
    //   Assert.ok(createResult.tx_id.length > 0, 'Tx id must be right');
    //   Assert.ok(createResult.raw.length > 0, 'Raw must be right');
    // });

    it('OVER_BALANCE', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      let createResult = await wallet.createRawTx({
        to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
        fee: 5,
        amount: 10000000
      });

      Assert.equal(createResult.error, 'OVER_BALANCE');
    });

    it('Fail to get utxo', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      let api = getApi(false);
      wallet.setApi(api);
      api.LTC.getUtxo = function() {
        return { cd: 1 };
      };
      try {
        await wallet.createRawTx({
          to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
          fee: 5,
          amount: 100000
        });
        Assert.fail();
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.can_not_get_utxo');
        Assert.equal(err.message, "Can't get utxo.");
      }
    });
  });

  describe('#send()', async() => {
    it('send invalid raw transaction', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));

      let rawTx = '100000001e8091cf6bbf1f383f49089011ceb908ad6f62ad78c295177cdafc1b3b2af131e0000000000ffffffff02e8030000000000001976a914f65f9ef810028c9e642ed1f149a254fa020be86c88ac40130000000000001976a9146273d8f8c8c41f3980adbc15b7a5509eb38372d288ac00000000';
      try {
        await wallet.send({ rawTx });
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.send_transaction_fail');
        Assert.ok(err.message.indexOf('decode hex') > 0);
      }
    });

    it('No rawTx & txParam', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));

      try {
        await wallet.send({});
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.missing_parameter');
        Assert.equal(err.message, 'Missing required parameter rawTx or txParams');
      }
    });

    it('fail to create raw', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));
      try {
        await wallet.send({
          txParams: {
            to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
            fee: 5,
            amount: 1000000000
          }
        });
        Assert.fail();
      } catch (err) {
        Assert.equal(err.code, 'infinito.wallet.create_rawtx_fail');
        Assert.equal(err.message, 'Fail when create raw transaction');
      }
    });

    // it('broadcast with custom fee', async() => {
    //   let wallet = new Wallet({
    //     coinType: CoinType.LTC.symbol,
    //     privateKey: ConfigTest.PRIVATE_KEY_LTC,
    //     isTestNet: true
    //   });
    //   wallet.setApi(getApi(true));
    //   let sendResult = await wallet.send({
    //     txParams: {
    //       to: 'LL4CcubAydhUmh2M8cKi78vbNZbSa774v3',
    //       fee: 5,
    //       amount: 1
    //     }
    //   });

    //   sendResult.should.have.property('tx_id');
    //   Assert.ok(sendResult.tx_id.length > 0);
    // });

    it('do not broadcast', async() => {
      let wallet = new Wallet({
        coinType: CoinType.LTC.symbol,
        privateKey: ConfigTest.PRIVATE_KEY_LTC,
        isTestNet: false
      });
      wallet.setApi(getApi(false));

      let rawTx = '0200000001da8c213e9cede4f75ad5c9023d7871781aa36102bf4bd12d59d004c26172c6cc000000006b483045022100ee0a66581681c105db89a89e0341e25b3708ffed3cd54a4fe7e51e4f4cc850280220741d37eea40c9064676cbb034611e36198f4281b2131f05984592cf2451225010121025cdbb5e871e74b2749388e1534f441d5d39a64bed8d1909315bde3bbee0cb138feffffff01e0a54b00000000001976a91441fd36eef3a1bcdb94dead1a24650d9e7f31e90a88ac00000000';
      let result = await wallet.send({ rawTx, isBroadCast: false });
      Assert.ok(result.raw.length > 0);
    });
  });

});